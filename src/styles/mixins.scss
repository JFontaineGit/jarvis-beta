@use './variables.scss' as *;
@use 'sass:math';

// Import Google Fonts
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;900&family=Exo+2:ital,wght@0,300;0,400;0,500;0,600;0,700;1,400&family=Rajdhani:wght@300;400;500;600;700&family=JetBrains+Mono:ital,wght@0,300;0,400;0,500;0,600;1,400&display=swap');

// Responsive Breakpoints
@mixin respond($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint `#{$breakpoint}`.";
  }
}

@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: calc(map-get($breakpoints, $breakpoint) + 1px)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint `#{$breakpoint}`.";
  }
}

// Holographic Glass Effects
@mixin holographic-glass($intensity: 'normal') {
  background: var(--glass-primary);
  backdrop-filter: blur($holo-blur);
  -webkit-backdrop-filter: blur($holo-blur);
  border: 1px solid var(--glass-border);
  
  @if $intensity == 'strong' {
    background: var(--glass-secondary);
    border-color: var(--glass-border-glow);
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.1),
      inset 0 0 20px rgba(0, 255, 255, 0.05);
  }
}

// Enhanced Neon Effects
@mixin neon-glow($color: var(--neon-primary), $intensity: 'normal') {
  $multiplier: map-get($neon-intensities, $intensity);
  
  color: $color;
  text-shadow: 
    0 0 5px rgba($color, 0.8 * $multiplier),
    0 0 10px rgba($color, 0.6 * $multiplier),
    0 0 20px rgba($color, 0.4 * $multiplier),
    0 0 40px rgba($color, 0.2 * $multiplier);
}

@mixin neon-border($color: var(--neon-primary), $width: 1px, $intensity: 'normal') {
  $multiplier: map-get($neon-intensities, $intensity);
  
  border: $width solid $color;
  box-shadow: 
    0 0 10px rgba($color, 0.6 * $multiplier),
    inset 0 0 10px rgba($color, 0.3 * $multiplier);
}

@mixin neon-box($color: var(--neon-primary), $intensity: 'normal') {
  $multiplier: map-get($neon-intensities, $intensity);
  
  box-shadow: 
    0 0 10px rgba($color, 0.4 * $multiplier),
    0 0 20px rgba($color, 0.3 * $multiplier),
    0 0 40px rgba($color, 0.2 * $multiplier),
    0 0 80px rgba($color, 0.1 * $multiplier);
}

// HUD Style Elements
@mixin hud-panel($padding: var(--hud-padding)) {
  @include holographic-glass('strong');
  border-radius: var(--radius-hud);
  padding: $padding;
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, 
      transparent 0%, 
      var(--neon-primary) 50%, 
      transparent 100%
    );
    animation: scanLine 3s ease-in-out infinite;
  }
}

// Floating Effect for Cards
@mixin float-card($hover-lift: 8px) {
  transition: all var(--transition-normal);
  
  &:hover {
    transform: translateY(-$hover-lift);
    box-shadow: 
      0 #{$hover-lift * 2} #{$hover-lift * 4} rgba(0, 0, 0, 0.3),
      0 0 #{$hover-lift * 3} rgba(0, 255, 255, 0.2);
  }
}

// Holographic Button
@mixin holo-button($type: 'primary') {
  @include holographic-glass();
  border-radius: var(--radius-sm);
  padding: var(--space-sm) var(--space-md);
  font-family: var(--font-primary);
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  cursor: pointer;
  transition: all var(--transition-normal);
  position: relative;
  overflow: hidden;
  
  @if $type == 'primary' {
    @include neon-glow(var(--neon-primary));
    @include neon-border(var(--neon-primary));
  } @else if $type == 'secondary' {
    @include neon-glow(var(--neon-secondary));
    @include neon-border(var(--neon-secondary));
  }
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.2), 
      transparent
    );
    transition: left var(--transition-fast);
  }
  
  &:hover::before {
    left: 100%;
  }
  
  &:hover {
    transform: translateY(-2px);
    @include neon-box(var(--neon-primary), 'strong');
  }
}

// Particle Background
@mixin particle-field($count: 50) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(2px 2px at 20px 30px, var(--particle-color), transparent),
      radial-gradient(2px 2px at 40px 70px, var(--particle-color), transparent),
      radial-gradient(1px 1px at 90px 40px, var(--particle-color), transparent),
      radial-gradient(1px 1px at 130px 80px, var(--particle-color), transparent),
      radial-gradient(2px 2px at 160px 30px, var(--particle-color), transparent);
    background-repeat: repeat;
    background-size: 200px 100px;
    animation: particleMove 20s linear infinite;
    opacity: 0.3;
    pointer-events: none;
  }
}

// Scan Line Animation
@mixin scan-lines($color: var(--neon-primary)) {
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(90deg, 
      transparent 0%, 
      $color 50%, 
      transparent 100%
    );
    animation: verticalScan 2s ease-in-out infinite;
  }
}

// Circuit Board Pattern
@mixin circuit-pattern($color: var(--neon-primary), $opacity: 0.1) {
  background-image: 
    linear-gradient(0deg, transparent 24%, $color 25%, $color 26%, transparent 27%, transparent 74%, $color 75%, $color 76%, transparent 77%, transparent),
    linear-gradient(90deg, transparent 24%, $color 25%, $color 26%, transparent 27%, transparent 74%, $color 75%, $color 76%, transparent 77%, transparent);
  background-size: 20px 20px;
  opacity: $opacity;
}

// Typing Animation
@mixin typing-animation($steps: 20) {
  overflow: hidden;
  white-space: nowrap;
  animation: typing 2s steps($steps, end), blink-caret 0.75s step-end infinite;
}

// Flex Utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column-center {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

// Grid Utilities
@mixin hud-grid($columns: 3, $gap: var(--space-lg)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
  
  @include respond(tablet) {
    grid-template-columns: repeat(2, 1fr);
  }
  
  @include respond(mobile) {
    grid-template-columns: 1fr;
  }
}

// Custom Scrollbar
@mixin holo-scrollbar($width: 6px) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(0, 255, 255, 0.1);
    border-radius: $width / 2;
  }
  
  &::-webkit-scrollbar-thumb {
    background: var(--neon-primary);
    border-radius: $width / 2;
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
    
    &:hover {
      background: var(--neon-secondary);
    }
  }
}

// Random particle generation using CSS calc
@mixin generate-particles($count: 20) {
  @for $i from 1 through $count {
    &:nth-child(#{$i}) {
      left: #{math.percentage(math.random())};
      top: #{math.percentage(math.random())};
      animation-delay: #{math.random() * 8}s;
      animation-duration: #{6 + math.random() * 4}s;
      transform: scale(#{0.5 + math.random() * 0.5});
    }
  }
}

// Keyframe Animations
@keyframes scanLine {
  0%, 100% { opacity: 0; transform: translateX(-100%); }
  50% { opacity: 1; transform: translateX(0); }
}

@keyframes verticalScan {
  0% { top: 0; opacity: 1; }
  50% { top: 50%; opacity: 0.5; }
  100% { top: 100%; opacity: 0; }
}

@keyframes particleMove {
  0% { transform: translateY(0) translateX(0); }
  100% { transform: translateY(-100px) translateX(100px); }
}

@keyframes holoFlicker {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.8; }
}

@keyframes dataStream {
  0% { transform: translateY(100%); }
  100% { transform: translateY(-100%); }
}

@keyframes typing {
  from { width: 0; }
  to { width: 100%; }
}

@keyframes blink-caret {
  from, to { border-color: transparent; }
  50% { border-color: var(--neon-primary); }
}

@keyframes pulseGlow {
  0%, 100% { 
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
  }
  50% { 
    box-shadow: 0 0 40px rgba(0, 255, 255, 0.6);
  }
}

@keyframes rotateHue {
  0% { filter: hue-rotate(0deg); }
  100% { filter: hue-rotate(360deg); }
}

@keyframes matrixRain {
  0% { transform: translateY(-100%); opacity: 1; }
  100% { transform: translateY(100vh); opacity: 0; }
}

// Utility Functions
@function z($layer) {
  @if map-has-key($z-indexes, $layer) {
    @return map-get($z-indexes, $layer);
  } @else {
    @warn "Unknown z-index layer `#{$layer}`.";
    @return 0;
  }
}

@function duration($speed) {
  @if map-has-key($durations, $speed) {
    @return map-get($durations, $speed);
  } @else {
    @warn "Unknown duration speed `#{$speed}`.";
    @return 400ms;
  }
}